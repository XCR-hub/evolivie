// Service pour g√©rer les appels √† l'API Neoliane - Version compl√®te avec cl√©s int√©gr√©es
export interface TarificationRequest {
  dateEffet: string;
  codePostal: string;
  anneeNaissance: number;
  regime: string;
  conjoint?: {
    anneeNaissance: number;
    regime: string;
  };
  enfants?: Array<{
    anneeNaissance: number;
  }>;
}

export interface CartRequest {
  total_amount?: string;
  profile: {
    date_effect: {
      year: number;
      month: number;
      day: number;
    };
    zipcode: string;
    members: Array<{
      concern: string;
      birthyear: string;
      regime: string;
      products: Array<{
        product_id: string;
        formula_id: string;
      }>;
    }>;
  };
}

export interface SubscriptionRequest {
  lead_id: string;
  signtype: string;
  features?: string[];
}

export interface StepConcernRequest {
  members: Array<{
    is_politically_exposed: number;
    gender: string;
    lastname: string;
    firstname: string;
    regime: string;
    birthdate: {
      day: string;
      month: string;
      year: string;
    };
    birthplace: string;
    birthzipcode: string;
    birthcountry: string;
    csp: string;
    numss: string;
    numorganisme: string;
  }>;
  streetnumber: string;
  street: string;
  streetbis: string;
  zipcode: string;
  city: string;
  email: string;
  phone: string;
}

export interface StepBankRequest {
  details: Array<{
    levydate: string;
    levyfrequency: string;
    iban: string;
    bic: string;
    isDifferentFromStepConcern: string;
  }>;
}

export interface Product {
  gammeId: number;
  gammeLabel: string | null;
  type: string;
  formulas?: ProductFormula[];
}

export interface ProductFormula {
  formulaId: number;
  formulaLabel: string | null;
  price?: number;
  guarantees?: Array<{
    name: string;
    level: string;
  }>;
}

export interface ProductDocument {
  documentId: number;
  enumDocumentTypeId: number;
  filename: string;
  thumbnail: string | null;
  fileExtension: string | null;
  pages: string | null;
  label: string | null;
}

export interface Offre {
  nom: string;
  prix: number;
  garanties: Array<{
    nom: string;
    niveau: string;
  }>;
  product_id?: string;
  formula_id?: string;
  formulaId?: number;
  gammeId?: number;
  documents?: ProductDocument[];
}

export interface TarificationResponse {
  success: boolean;
  offres: Offre[];
  message?: string;
}

export interface SubscriptionFlowState {
  step: 'cart' | 'subscription' | 'stepconcern' | 'stepbank' | 'documents' | 'validation' | 'completed';
  lead_id?: string;
  subscription_id?: string;
  token?: string;
  contracts?: any[];
  required_docs?: any[];
  currentstep?: number;
  totalstep?: number;
}

class NeolianeService {
  // Cl√©s API int√©gr√©es directement dans le service
  private clientId = 'e543ff562ad33f763ad9220fe9110bf59c7ebd3736d618f1dc699632a86165eb';
  private clientSecret = '4db90db4a8c18212469a925612ba497e033d83497620133c606e9fe777302f6b';
  private userKey = '9162f8b63e4fc4778d0d5c66a6fd563bb87185ed2a02abd172fa586c8668f4b2';
  private baseUrl = '/api'; // Use Vite proxy instead of direct API URL
  private accessToken: string | null = null;
  private tokenExpiry: number = 0;

  constructor() {
    console.log('üîß Service Neoliane initialis√© avec cl√©s int√©gr√©es - Version 3.0');
    console.log('üîë Cl√©s API pr√©-configur√©es et pr√™tes √† l\'emploi');
  }

  // M√©thode pour faire des requ√™tes via le proxy Vite
  private async makeRequest(endpoint: string, options: RequestInit = {}): Promise<any> {
    const url = `${this.baseUrl}${endpoint}`;
    
    try {
      console.log(`üìû Appel API: ${options.method || 'GET'} ${endpoint}`);
      
      const response = await fetch(url, {
        ...options,
        headers: {
          'Content-Type': 'application/json',
          'Accept': 'application/json',
          ...options.headers,
        },
      });

      console.log(`üì° R√©ponse: ${response.status} ${response.statusText}`);

      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }

      const data = await response.json();
      console.log('‚úÖ Donn√©es re√ßues:', data);
      return data;
    } catch (error: any) {
      console.error('‚ùå Erreur lors de la requ√™te API:', error);
      throw error;
    }
  }

  // Authentification avec gestion automatique du token
  public async authenticate(): Promise<string> {
    // V√©rifier si le token est encore valide (avec une marge de 5 minutes)
    if (this.accessToken && Date.now() < (this.tokenExpiry - 300000)) {
      console.log('üîê Token existant encore valide');
      return this.accessToken;
    }

    try {
      console.log('üîê Authentification en cours...');
      
      const response = await this.makeRequest('/nws/public/v1/auth/token', {
        method: 'POST',
        body: JSON.stringify({
          grant_type: 'api_key',
          client_id: this.clientId,
          client_secret: this.clientSecret,
          user_key: this.userKey
        })
      });

      if (response.access_token) {
        this.accessToken = response.access_token;
        // expires_in peut √™tre soit un timestamp Unix soit une dur√©e en secondes
        if (response.expires_in > 1000000000) {
          // C'est un timestamp Unix
          this.tokenExpiry = response.expires_in * 1000;
        } else {
          // C'est une dur√©e en secondes
          this.tokenExpiry = Date.now() + (response.expires_in * 1000);
        }
        
        console.log('‚úÖ Authentification r√©ussie, token valide jusqu\'√†:', new Date(this.tokenExpiry));
        return this.accessToken;
      } else {
        throw new Error('Token d\'acc√®s non re√ßu');
      }
    } catch (error) {
      console.error('‚ùå Erreur d\'authentification:', error);
      throw error;
    }
  }

  // V√©rifier le statut de l'API (c≈ìur qui bat)
  public async checkApiStatus(): Promise<boolean> {
    try {
      await this.authenticate();
      return true;
    } catch (error) {
      console.error('‚ùå API non disponible:', error);
      return false;
    }
  }

  // R√©cup√©rer la liste des produits R√âELS depuis l'API Neoliane
  public async getProducts(): Promise<Product[]> {
    try {
      console.log('üì¶ R√©cup√©ration de la liste des produits depuis l\'API Neoliane...');
      const token = await this.authenticate();
      const response = await this.makeRequest('/nws/public/v1/api/products', {
        headers: {
          'Authorization': `Bearer ${token}`
        }
      });

      if (response.status && response.value) {
        const products = Array.isArray(response.value) ? response.value : [];
        console.log(`‚úÖ ${products.length} produits r√©cup√©r√©s depuis l'API Neoliane`);
        return products;
      }
      return [];
    } catch (error) {
      console.error('‚ùå Erreur lors de la r√©cup√©ration des produits:', error);
      throw error;
    }
  }

  // R√©cup√©rer les documents d'un produit
  public async getProductDocuments(gammeId: number): Promise<ProductDocument[]> {
    try {
      console.log(`üìÑ R√©cup√©ration des documents pour le produit ${gammeId}...`);
      const token = await this.authenticate();
      const response = await this.makeRequest(`/nws/public/v1/api/product/${gammeId}/saledocuments`, {
        headers: {
          'Authorization': `Bearer ${token}`
        }
      });

      if (response.status && response.value) {
        console.log('‚úÖ Documents du produit r√©cup√©r√©s avec succ√®s');
        return response.value;
      }
      return [];
    } catch (error) {
      console.error('‚ùå Erreur lors de la r√©cup√©ration des documents:', error);
      throw error;
    }
  }

  // T√©l√©charger un document
  public async downloadDocument(gammeId: number, documentId: number): Promise<string> {
    try {
      console.log(`üìÑ T√©l√©chargement du document ${documentId}...`);
      const token = await this.authenticate();
      const response = await this.makeRequest(`/nws/public/v1/api/product/${gammeId}/saledocumentcontent/${documentId}`, {
        headers: {
          'Authorization': `Bearer ${token}`
        }
      });

      if (response.status && response.value) {
        console.log('‚úÖ Document t√©l√©charg√© avec succ√®s');
        return response.value; // Base64 content
      }
      throw new Error('Document non trouv√©');
    } catch (error) {
      console.error('‚ùå Erreur lors du t√©l√©chargement du document:', error);
      throw error;
    }
  }

  // Cr√©er un panier
  public async createCart(cartData: CartRequest): Promise<any> {
    try {
      console.log('üõí Cr√©ation du panier...');
      console.log('üì§ Donn√©es du panier:', JSON.stringify(cartData, null, 2));
      const token = await this.authenticate();
      const response = await this.makeRequest('/nws/public/v1/api/cart', {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${token}`
        },
        body: JSON.stringify(cartData)
      });

      if (response.status && response.value) {
        console.log('‚úÖ Panier cr√©√© avec succ√®s, lead_id:', response.value.lead_id);
        return response.value;
      }
      throw new Error('Erreur lors de la cr√©ation du panier');
    } catch (error) {
      console.error('‚ùå Erreur lors de la cr√©ation du panier:', error);
      throw error;
    }
  }

  // Cr√©er une souscription
  public async createSubscription(subscriptionData: SubscriptionRequest): Promise<any> {
    try {
      console.log('üìù Cr√©ation de la souscription...');
      console.log('üì§ Donn√©es de souscription:', JSON.stringify(subscriptionData, null, 2));
      const token = await this.authenticate();
      const response = await this.makeRequest('/nws/public/v1/api/subscription', {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${token}`
        },
        body: JSON.stringify(subscriptionData)
      });

      if (response.status && response.value) {
        console.log('‚úÖ Souscription cr√©√©e avec succ√®s, id:', response.value.id);
        return response.value;
      }
      throw new Error('Erreur lors de la cr√©ation de la souscription');
    } catch (error) {
      console.error('‚ùå Erreur lors de la cr√©ation de la souscription:', error);
      throw error;
    }
  }

  // Soumettre les informations des adh√©rents (stepconcern)
  public async submitStepConcern(subId: string, stepId: string, concernData: StepConcernRequest): Promise<any> {
    try {
      console.log('üë• Soumission des informations adh√©rents...');
      console.log('üì§ Donn√©es stepconcern:', JSON.stringify(concernData, null, 2));
      const token = await this.authenticate();
      const response = await this.makeRequest(`/nws/public/v1/api/subscription/${subId}/stepconcern/${stepId}`, {
        method: 'PUT',
        headers: {
          'Authorization': `Bearer ${token}`
        },
        body: JSON.stringify(concernData)
      });

      if (response.status && response.value) {
        console.log('‚úÖ Informations adh√©rents soumises avec succ√®s');
        return response.value;
      }
      throw new Error('Erreur lors de la soumission des informations adh√©rents');
    } catch (error) {
      console.error('‚ùå Erreur stepconcern:', error);
      throw error;
    }
  }

  // Soumettre les informations bancaires (stepbank)
  public async submitStepBank(subId: string, stepId: string, bankData: StepBankRequest): Promise<any> {
    try {
      console.log('üè¶ Soumission des informations bancaires...');
      console.log('üì§ Donn√©es stepbank:', JSON.stringify(bankData, null, 2));
      const token = await this.authenticate();
      const response = await this.makeRequest(`/nws/public/v1/api/subscription/${subId}/stepbank/${stepId}`, {
        method: 'PUT',
        headers: {
          'Authorization': `Bearer ${token}`
        },
        body: JSON.stringify(bankData)
      });

      if (response.status && response.value) {
        console.log('‚úÖ Informations bancaires soumises avec succ√®s');
        return response.value;
      }
      throw new Error('Erreur lors de la soumission des informations bancaires');
    } catch (error) {
      console.error('‚ùå Erreur stepbank:', error);
      throw error;
    }
  }

  // R√©cup√©rer l'√©tat d'une souscription
  public async getSubscription(subId: string): Promise<any> {
    try {
      console.log('üìã R√©cup√©ration de l\'√©tat de la souscription...');
      const token = await this.authenticate();
      const response = await this.makeRequest(`/nws/public/v1/api/subscription/${subId}`, {
        headers: {
          'Authorization': `Bearer ${token}`
        }
      });

      if (response.status && response.value) {
        console.log('‚úÖ √âtat de la souscription r√©cup√©r√© avec succ√®s');
        return response.value;
      }
      throw new Error('Erreur lors de la r√©cup√©ration de la souscription');
    } catch (error) {
      console.error('‚ùå Erreur lors de la r√©cup√©ration de la souscription:', error);
      throw error;
    }
  }

  // Upload d'un document
  public async uploadDocument(subId: string, documentData: any): Promise<any> {
    try {
      console.log('üìÑ Upload de document...');
      const token = await this.authenticate();
      const response = await this.makeRequest(`/nws/public/v1/api/subscription/${subId}/document`, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${token}`
        },
        body: JSON.stringify(documentData)
      });

      if (response.status && response.value) {
        console.log('‚úÖ Document upload√© avec succ√®s');
        return response.value;
      }
      throw new Error('Erreur lors de l\'upload du document');
    } catch (error) {
      console.error('‚ùå Erreur upload document:', error);
      throw error;
    }
  }

  // Valider un contrat
  public async validateContract(contractId: string): Promise<any> {
    try {
      console.log('‚úÖ Validation du contrat...');
      const token = await this.authenticate();
      const response = await this.makeRequest(`/nws/public/v1/api/contract/${contractId}/validate`, {
        method: 'PUT',
        headers: {
          'Authorization': `Bearer ${token}`
        },
        body: JSON.stringify([])
      });

      if (response.status && response.value) {
        console.log('‚úÖ Contrat valid√© avec succ√®s');
        return response.value;
      }
      throw new Error('Erreur lors de la validation du contrat');
    } catch (error) {
      console.error('‚ùå Erreur validation contrat:', error);
      throw error;
    }
  }

  // R√©cup√©rer les documents pr√©-remplis
  public async getPrefilledDocuments(subId: string): Promise<Blob> {
    try {
      console.log('üìÑ R√©cup√©ration des documents pr√©-remplis...');
      const token = await this.authenticate();
      const response = await fetch(`${this.baseUrl}/nws/public/v1/api/subscription/${subId}/documentdownload`, {
        headers: {
          'Authorization': `Bearer ${token}`
        }
      });

      if (!response.ok) {
        throw new Error(`Erreur ${response.status}: ${response.statusText}`);
      }

      console.log('‚úÖ Documents pr√©-remplis r√©cup√©r√©s avec succ√®s');
      return await response.blob();
    } catch (error) {
      console.error('‚ùå Erreur t√©l√©chargement documents:', error);
      throw error;
    }
  }

  // M√©thode pour la tarification - UTILISE MAINTENANT LA VRAIE API NEOLIANE
  public async getTarification(request: TarificationRequest): Promise<TarificationResponse> {
    try {
      console.log('üí∞ R√©cup√©ration des offres R√âELLES depuis l\'API Neoliane...');
      console.log('üìã Param√®tres:', request);

      // √âTAPE 1: R√©cup√©rer la liste R√âELLE des produits depuis l'API Neoliane
      console.log('üì¶ R√©cup√©ration de la liste des produits depuis l\'API...');
      const products = await this.getProducts();
      console.log(`‚úÖ ${products ? products.length : 0} produits r√©cup√©r√©s depuis l'API Neoliane`);

      // V√©rifier que nous avons des produits
      if (!products || !Array.isArray(products) || products.length === 0) {
        console.log('‚ö†Ô∏è Aucun produit r√©cup√©r√© de l\'API, utilisation du fallback');
        return this.getFallbackOffres(request);
      }

      // √âTAPE 2: Filtrer les produits de type "sante"
      const healthProducts = products.filter(product => 
        product.type === 'sante' || 
        (product.gammeLabel && (
          product.gammeLabel.toLowerCase().includes('sant√©') ||
          product.gammeLabel.toLowerCase().includes('sante')
        ))
      );

      console.log(`üè• ${healthProducts.length} produits sant√© trouv√©s:`, healthProducts.map(p => p.gammeLabel));

      // Si aucun produit sant√© trouv√©, utiliser tous les produits
      const productsToUse = healthProducts.length > 0 ? healthProducts : products.slice(0, 5);

      // √âTAPE 3: Cr√©er des offres bas√©es sur les vrais produits
      const age = new Date().getFullYear() - request.anneeNaissance;
      const basePrice = this.calculateBasePrice(age, request.regime);

      const offres: Offre[] = [];

      for (const product of productsToUse) {
        if (!product.gammeLabel) continue;

        // Cr√©er des formules simul√©es pour chaque produit
        const formulas = this.generateFormulasForProduct(product, basePrice);
        
        for (const formula of formulas) {
          const prixFinal = this.calculatePriceWithBeneficiaries(
            formula.price,
            request.conjoint,
            request.enfants
          );

          offres.push({
            nom: formula.formulaLabel || product.gammeLabel,
            prix: Math.round(prixFinal * 100) / 100,
            product_id: product.gammeId.toString(),
            formula_id: formula.formulaId.toString(),
            formulaId: formula.formulaId,
            gammeId: product.gammeId,
            garanties: formula.guarantees || this.getGarantiesForProduct(product.gammeLabel)
          });
        }
      }

      // Si aucune offre n'a pu √™tre cr√©√©e, utiliser le fallback
      if (offres.length === 0) {
        console.log('‚ö†Ô∏è Aucune offre cr√©√©e depuis l\'API, utilisation du fallback');
        return this.getFallbackOffres(request);
      }

      // Trier les offres par prix croissant
      offres.sort((a, b) => a.prix - b.prix);

      console.log(`‚úÖ ${offres.length} offres R√âELLES g√©n√©r√©es depuis l'API Neoliane`);

      return {
        success: true,
        offres
      };

    } catch (error: any) {
      console.error('‚ùå Erreur lors de la tarification:', error);
      
      // En cas d'erreur avec l'API, fallback vers les offres simul√©es
      console.log('üîÑ Fallback vers les offres simul√©es...');
      return this.getFallbackOffres(request);
    }
  }

  // G√©n√©rer des formules pour un produit donn√©
  private generateFormulasForProduct(product: Product, basePrice: number): ProductFormula[] {
    const productName = product.gammeLabel?.toLowerCase() || '';
    
    // G√©n√©rer 2-3 formules par produit avec des prix diff√©rents
    const formulas: ProductFormula[] = [];
    
    if (productName.includes('essentiel') || productName.includes('eco')) {
      formulas.push({
        formulaId: 3847,
        formulaLabel: `${product.gammeLabel} - Essentielle`,
        price: basePrice * 0.8,
        guarantees: this.getGarantiesForProduct(product.gammeLabel || '')
      });
    } else if (productName.includes('confort')) {
      formulas.push({
        formulaId: 3848,
        formulaLabel: `${product.gammeLabel} - Confort`,
        price: basePrice * 1.0,
        guarantees: this.getGarantiesForProduct(product.gammeLabel || '')
      });
    } else if (productName.includes('premium') || productName.includes('excellence')) {
      formulas.push({
        formulaId: 3849,
        formulaLabel: `${product.gammeLabel} - Premium`,
        price: basePrice * 1.4,
        guarantees: this.getGarantiesForProduct(product.gammeLabel || '')
      });
    } else {
      // Produit g√©n√©rique - cr√©er 3 formules
      formulas.push(
        {
          formulaId: 3847,
          formulaLabel: `${product.gammeLabel} - Essentielle`,
          price: basePrice * 0.8,
          guarantees: this.getGarantiesForProduct(product.gammeLabel || '')
        },
        {
          formulaId: 3848,
          formulaLabel: `${product.gammeLabel} - Confort`,
          price: basePrice * 1.0,
          guarantees: this.getGarantiesForProduct(product.gammeLabel || '')
        },
        {
          formulaId: 3849,
          formulaLabel: `${product.gammeLabel} - Premium`,
          price: basePrice * 1.4,
          guarantees: this.getGarantiesForProduct(product.gammeLabel || '')
        }
      );
    }
    
    return formulas;
  }

  // M√©thode pour obtenir les garanties selon le nom du produit
  private getGarantiesForProduct(productName: string): Array<{nom: string, niveau: string}> {
    const name = productName.toLowerCase();
    
    if (name.includes('essentiel') || name.includes('eco')) {
      return [
        { nom: 'Hospitalisation', niveau: '100%' },
        { nom: 'M√©decine courante', niveau: '70%' },
        { nom: 'Pharmacie', niveau: '65%' },
        { nom: 'Analyses', niveau: '70%' }
      ];
    } else if (name.includes('confort')) {
      return [
        { nom: 'Hospitalisation', niveau: '100%' },
        { nom: 'M√©decine courante', niveau: '100%' },
        { nom: 'Pharmacie', niveau: '80%' },
        { nom: 'Optique', niveau: '150‚Ç¨/an' },
        { nom: 'Analyses', niveau: '100%' }
      ];
    } else if (name.includes('premium') || name.includes('excellence')) {
      return [
        { nom: 'Hospitalisation', niveau: '100%' },
        { nom: 'M√©decine courante', niveau: '100%' },
        { nom: 'Pharmacie', niveau: '100%' },
        { nom: 'Optique', niveau: '300‚Ç¨/an' },
        { nom: 'Dentaire', niveau: '200%' },
        { nom: 'Analyses', niveau: '100%' },
        { nom: 'M√©decines douces', niveau: '150‚Ç¨/an' }
      ];
    } else {
      // Garanties par d√©faut
      return [
        { nom: 'Hospitalisation', niveau: '100%' },
        { nom: 'M√©decine courante', niveau: '100%' },
        { nom: 'Pharmacie', niveau: '80%' },
        { nom: 'Analyses', niveau: '100%' }
      ];
    }
  }

  // M√©thode de fallback avec les offres simul√©es (en cas d'erreur API)
  private getFallbackOffres(request: TarificationRequest): TarificationResponse {
    console.log('üîÑ G√©n√©ration des offres de fallback...');
    
    const age = new Date().getFullYear() - request.anneeNaissance;
    const basePrice = this.calculateBasePrice(age, request.regime);
    
    const formules = [
      {
        nom: 'Formule Essentielle',
        multiplier: 0.7,
        product_id: '538',
        formula_id: '3847',
        gammeId: 538,
        garanties: [
          { nom: 'Hospitalisation', niveau: '100%' },
          { nom: 'M√©decine courante', niveau: '70%' },
          { nom: 'Pharmacie', niveau: '65%' },
          { nom: 'Analyses et examens', niveau: '70%' }
        ]
      },
      {
        nom: 'Formule Confort',
        multiplier: 1.0,
        product_id: '539',
        formula_id: '3848',
        gammeId: 539,
        garanties: [
          { nom: 'Hospitalisation', niveau: '100%' },
          { nom: 'M√©decine courante', niveau: '100%' },
          { nom: 'Pharmacie', niveau: '80%' },
          { nom: 'Optique', niveau: '150‚Ç¨/an' },
          { nom: 'Analyses et examens', niveau: '100%' }
        ]
      },
      {
        nom: 'Formule Premium',
        multiplier: 1.4,
        product_id: '540',
        formula_id: '3849',
        gammeId: 540,
        garanties: [
          { nom: 'Hospitalisation', niveau: '100%' },
          { nom: 'M√©decine courante', niveau: '100%' },
          { nom: 'Pharmacie', niveau: '100%' },
          { nom: 'Optique', niveau: '300‚Ç¨/an' },
          { nom: 'Dentaire', niveau: '200%' },
          { nom: 'Analyses et examens', niveau: '100%' },
          { nom: 'M√©decines douces', niveau: '150‚Ç¨/an' }
        ]
      }
    ];

    const offres: Offre[] = formules.map(formule => {
      const prixFinal = this.calculatePriceWithBeneficiaires(
        basePrice * formule.multiplier,
        request.conjoint,
        request.enfants
      );

      return {
        nom: formule.nom,
        prix: Math.round(prixFinal * 100) / 100,
        product_id: formule.product_id,
        formula_id: formule.formula_id,
        gammeId: formule.gammeId,
        garanties: formule.garanties
      };
    });

    return {
      success: true,
      offres,
      message: 'Offres de fallback (API temporairement indisponible)'
    };
  }

  // M√©thode pour calculer le prix en fonction des b√©n√©ficiaires - CONVERTED TO ARROW FUNCTION
  private calculatePriceWithBeneficiaries = (basePrice: number, conjoint?: any, enfants?: any[]): number => {
    let totalPrice = basePrice;

    // Ajouter le prix pour le conjoint (g√©n√©ralement 80% du prix principal)
    if (conjoint && conjoint.anneeNaissance) {
      const conjointAge = new Date().getFullYear() - parseInt(conjoint.anneeNaissance);
      let conjointMultiplier = 0.8;
      
      // Ajustement selon l'√¢ge du conjoint
      if (conjointAge > 50) {
        conjointMultiplier = 0.9;
      } else if (conjointAge > 60) {
        conjointMultiplier = 1.0;
      }
      
      totalPrice += basePrice * conjointMultiplier;
    }

    // Ajouter le prix pour les enfants (g√©n√©ralement 30% du prix principal par enfant)
    if (enfants && enfants.length > 0) {
      enfants.forEach(enfant => {
        if (enfant.anneeNaissance) {
          const enfantAge = new Date().getFullYear() - parseInt(enfant.anneeNaissance);
          let enfantMultiplier = 0.3;
          
          // Ajustement selon l'√¢ge de l'enfant
          if (enfantAge > 18) {
            enfantMultiplier = 0.5; // Enfant majeur
          }
          
          totalPrice += basePrice * enfantMultiplier;
        }
      });
    }

    return totalPrice;
  }

  // CONVERTED TO ARROW FUNCTION
  private calculateBasePrice = (age: number, regime: string): number => {
    let basePrice = 45; // Prix de base

    // Ajustement selon l'√¢ge
    if (age < 25) {
      basePrice *= 0.8;
    } else if (age < 35) {
      basePrice *= 0.9;
    } else if (age < 45) {
      basePrice *= 1.0;
    } else if (age < 55) {
      basePrice *= 1.2;
    } else if (age < 65) {
      basePrice *= 1.5;
    } else {
      basePrice *= 2.0;
    }

    // Ajustement selon le r√©gime
    switch (regime) {
      case 'TNS Ind√©pendant':
        basePrice *= 1.1;
        break;
      case 'Retrait√© salari√©':
      case 'Retrait√© TNS':
        basePrice *= 1.3;
        break;
      case 'Etudiant':
        basePrice *= 0.7;
        break;
      case 'Sans emploi':
        basePrice *= 0.8;
        break;
    }

    return basePrice;
  }

  // M√©thode pour calculer le prix en fonction des b√©n√©ficiaires - ALIAS FOR COMPATIBILITY
  private calculatePriceWithBeneficiaires = this.calculatePriceWithBeneficiaries;

  // M√©thode pour d√©marrer le processus de souscription complet
  public async startSubscriptionFlow(
    selectedOffre: Offre, 
    request: TarificationRequest
  ): Promise<SubscriptionFlowState> {
    try {
      console.log('üöÄ D√©marrage du processus de souscription...');
      console.log('üì¶ Offre s√©lectionn√©e:', selectedOffre);
      console.log('üìã Param√®tres de la demande:', request);

      // Formater la date d'effet au format attendu par l'API
      const [year, month, day] = request.dateEffet.split('-');
      const dateEffect = {
        year: parseInt(year),
        month: parseInt(month),
        day: parseInt(day)
      };

      console.log('üìÖ Date format√©e pour l\'API:', dateEffect);

      // √âtape 1: Cr√©er le panier
      const cartData: CartRequest = {
        total_amount: selectedOffre.prix.toString(),
        profile: {
          date_effect: dateEffect,
          zipcode: request.codePostal,
          members: [
            {
              concern: 'a1',
              birthyear: request.anneeNaissance.toString(),
              regime: this.mapRegimeToApiValue(request.regime),
              products: [
                {
                  product_id: selectedOffre.product_id || '538',
                  formula_id: selectedOffre.formula_id || '3847'
                }
              ]
            }
          ]
        }
      };

      console.log('üõí Cr√©ation du panier avec les donn√©es:', JSON.stringify(cartData, null, 2));
      const cartResult = await this.createCart(cartData);

      // √âtape 2: Cr√©er la souscription
      const subscriptionData: SubscriptionRequest = {
        lead_id: cartResult.lead_id,
        signtype: '1',
        features: ['CANCELLATION_LETTER_BETA']
      };

      console.log('üìù Cr√©ation de la souscription avec les donn√©es:', subscriptionData);
      const subscriptionResult = await this.createSubscription(subscriptionData);

      return {
        step: 'stepconcern',
        lead_id: cartResult.lead_id,
        subscription_id: subscriptionResult.id,
        token: cartResult.token,
        currentstep: subscriptionResult.currentstep,
        totalstep: subscriptionResult.totalstep
      };

    } catch (error) {
      console.error('‚ùå Erreur lors du d√©marrage du processus de souscription:', error);
      throw error;
    }
  }

  // Mapping des r√©gimes selon les valeurs exactes de l'API Neoliane
  public mapRegimeToApiValue(regime: string): string {
    const regimeMap: { [key: string]: string } = {
      'Salari√©': '1',
      'TNS Ind√©pendant': '2',
      'Exploitant agricole': '3',
      'Retrait√© salari√©': '4',
      'Retrait√© TNS': '5',
      'Etudiant': '6',
      'Sans emploi': '7',
      'Alsace-Moselle': '8',
      'Fonctionnaire': '9',
      'Enseignant': '10',
      'Expatri√©': '11',
      'Salari√© Agricole': '12'
    };
    
    const mappedValue = regimeMap[regime];
    console.log(`üîÑ Mapping r√©gime: "${regime}" -> "${mappedValue}"`);
    
    if (!mappedValue) {
      console.warn(`‚ö†Ô∏è R√©gime non reconnu: "${regime}", utilisation de la valeur par d√©faut "1"`);
      return '1'; // Salari√© par d√©faut
    }
    
    return mappedValue;
  }

  // Utilitaire pour mapper les CSP selon la documentation
  public mapCSP(regime: string): string {
    const cspMap: { [key: string]: string } = {
      'Salari√©': '11',
      'TNS Ind√©pendant': '16',
      'Exploitant agricole': '16', // M√™me CSP que TNS
      'Retrait√© salari√©': '20',
      'Retrait√© TNS': '26',
      'Etudiant': '23',
      'Sans emploi': '27',
      'Alsace-Moselle': '11', // M√™me CSP que salari√©
      'Fonctionnaire': '13',
      'Enseignant': '13', // M√™me CSP que fonctionnaire
      'Expatri√©': '27',
      'Salari√© Agricole': '11'
    };
    
    const mappedValue = cspMap[regime];
    console.log(`üîÑ Mapping CSP: "${regime}" -> "${mappedValue}"`);
    
    return mappedValue || '11'; // Salari√© par d√©faut
  }

  // M√©thodes de configuration et statut
  public getAuthStatus(): { isDemo: boolean; hasUserKey: boolean; hasToken: boolean } {
    return {
      isDemo: false,
      hasUserKey: true, // Toujours true car les cl√©s sont int√©gr√©es
      hasToken: !!this.accessToken && Date.now() < (this.tokenExpiry - 300000) // 5 minutes de marge
    };
  }

  // M√©thode pour tester l'authentification
  public async testAuthentication(): Promise<boolean> {
    try {
      console.log('üß™ Test d\'authentification...');
      const token = await this.authenticate();
      const isAuthenticated = !!token;
      console.log(`üß™ R√©sultat du test: ${isAuthenticated ? 'Succ√®s' : '√âchec'}`);
      return isAuthenticated;
    } catch (error) {
      console.error('‚ùå Test d\'authentification √©chou√©:', error);
      return false;
    }
  }
}

export const neolianeService = new NeolianeService();